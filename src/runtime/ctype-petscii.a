
; assembly implementation of ctype.h
; the implementation is petscii-specific.

fold_cases = %01111111 ; 'a' xor 'A' xor $ff

; int isdigit(int c);
cc64_type_isdigit = int_fastcall
cc64_symbol_isdigit
        cpx #0
        bne ldx_0_return_false
        cmp #$30
        bcc return_false
        cmp #$3a
        bcs return_false
        bcc return_true

; int isalnum(int c);
cc64_type_isalnum = int_fastcall
cc64_symbol_isalnum
        cpx #0
        bne ldx_0_return_false
        cmp #$30
        bcc return_false
        cmp #$3a
        bcc return_true
        bcs isalpha

; int isalpha(int c);
cc64_type_isalpha = int_fastcall
cc64_symbol_isalpha
        cpx #0
        bne ldx_0_return_false
isalpha
        cmp #$5f ; underscore
        beq return_true
        and #fold_cases
        cmp #$41
        bcc return_false
        cmp #$5b
        bcs return_false
return_true
        lda #$01
        rts
ldx_0_return_false
        ldx #0
return_false
        txa
        rts

; int isspace(int c);
cc64_type_isspace = int_fastcall
cc64_symbol_isspace
        cpx #0
        bne ldx_0_return_false
        cmp #$20
        beq return_true
        cmp #$0e
        bcs return_false
        cmp #$09
        bcc return_false
        bcs return_true

; int islower(int c);
cc64_type_islower = int_fastcall
cc64_symbol_islower
        cpx #0
        bne ldx_0_return_false
        cmp #$41
        bcc return_false
        cmp #$5b
        bcc return_true
        bcs return_false

; int isupper(int c);
cc64_type_isupper = int_fastcall
cc64_symbol_isupper
        cpx #0
        bne ldx_0_return_false
        cmp #$61
        bcc return_false
        cmp #$7b
        bcc return_true
        cmp #$c1
        bcc return_false
        cmp #$db
        bcc return_true
        bcs return_false

; int tolower(int c);
cc64_type_tolower = int_fastcall
cc64_symbol_tolower
        cpx #0
        bne return_a
        cmp #$61
        bcc return_a
        cmp #$7b
        bcc and_5f
        cmp #$c1
        bcc return_a
        cmp #$db
        bcs return_a
and_5f
        and #$5f
return_a
        rts

; int toupper(int c);
cc64_type_toupper = int_fastcall
cc64_symbol_toupper
        cpx #0
        bne return_a
        cmp #$41
        bcc return_a
        cmp #$5b
        bcs return_a
        ora #$80
        rts
