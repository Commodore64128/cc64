
; Dynamically adds characters needed for C to the C64 charset.

; Copies the character ROM ($d000-$dfff) into the parallel RAM, patches
; in the charactes \^_{|}~, and then switches the screen memory from
; $0400 to $cc00 so the charset in RAM is used.

; The start address is selected so that the code ends at $cbff, with
; the last 6 bytes containing a signature that cc64 recognizes and
; uses to switch to the RAM charset if it is present.

; philip zembrod , 3.9.1994
; letzte aenderung 8.3.2020

        *= $cb3a

!addr   zp_src   = $22

!addr   charset = $d000
charset_pages = $10
!addr   charset_lower_upper = charset + (charset_pages << 7)

!addr   basout   = $ffd2
!addr   clrchn   = $ffcc

        jmp init

charlist
        !byte $1c
        !byte %00000000
        !byte %01100000
        !byte %00110000
        !byte %00011000
        !byte %00001100
        !byte %00000110
        !byte %00000011
        !byte %00000000

        !byte $1e
        !byte %00000000
        !byte %00011000
        !byte %00111100
        !byte %01100110
        !byte %00000000
        !byte %00000000
        !byte %00000000
        !byte %00000000

        !byte $1f
        !byte %00000000
        !byte %00000000
        !byte %00000000
        !byte %00000000
        !byte %00000000
        !byte %00000000
        !byte %00000000
        !byte %11111111

        !byte $5b
        !byte %00001100
        !byte %00011000
        !byte %00011000
        !byte %00110000
        !byte %00011000
        !byte %00011000
        !byte %00001100
        !byte %00000000

        !byte $5c
        !byte %00011000
        !byte %00011000
        !byte %00011000
        !byte %00000000
        !byte %00011000
        !byte %00011000
        !byte %00011000
        !byte %00000000

        !byte $5d
        !byte %00110000
        !byte %00011000
        !byte %00011000
        !byte %00001100
        !byte %00011000
        !byte %00011000
        !byte %00110000
        !byte %00000000

        !byte $5e
        !byte %00000000
        !byte %00110010
        !byte %01111110
        !byte %01001100
        !byte %00000000
        !byte %00000000
        !byte %00000000
        !byte %00000000

        !byte $20

init    sei
        lda $01
        pha
        lda #$33
        sta $01

        lda #<charset
        sta zp_src
        lda #>charset
        sta zp_src + 1
        ldx #charset_pages
        ldy #0

copy_loop
        lda (zp_src),y
        sta (zp_src),y
        iny
        bne copy_loop
        inc zp_src + 1
        dex
        bne copy_loop

        lda #$34
        sta $01

        ldx #0
patch_loop
        lda # (>charset_lower_upper) >>> 3
        sta zp_src + 1
        lda charlist,x
        inx
        cmp #$20
        beq patch_done
        asl
        rol zp_src + 1
        asl
        rol zp_src + 1
        asl
        rol zp_src + 1
        sta zp_src

        ldy #0
next_line
        lda charlist,x
        inx
        pha
        sta (zp_src),y
        iny
        cpy #8
        bne next_line

        dey
        lda zp_src + 1
        ora #$04
        sta zp_src + 1

next_reverse_line
        pla
        eor #$ff
        sta (zp_src),y
        dey
        bpl next_reverse_line

        jmp patch_loop

patch_done
        pla
        sta $01
        cli

re_init lda #$cc
        sta $0288

        jsr clrchn
        lda #$93 ; clr
        jsr basout

        lda #%00110111
        sta $d018
        lda $dd00
        and #$fc
        sta $dd00

        rts

magic   !word $6502, $1103
        jmp re_init

