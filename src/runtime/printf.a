
+cc64_static_char ~xprintf_param_count, 0
+cc64_static_int ~xprintf_putc_ptr, 0
+cc64_static_int ~xprintf_count, 0
+cc64_static_char ~xprintf_d_count, 0
+cc64_static_buf ~xprintf_d_out, 0, 5
+cc64_static_char ~xprintf_leading_char, 0
+cc64_static_char ~xprintf_leading_count, 0

xprintf_fmt_ptr = cc64_zp
xprintf_param_val = tmp_zp1
xprintf_param_sign = tmp_zp2

xprintf_putc
        inc xprintf_count
        bne +
        inc xprintf_count + 1
+       jmp (xprintf_putc_ptr)

cc64_type_fprintf = int_func
cc64_symbol_fprintf
        ; stash away param count
        sty xprintf_param_count
        lda #<CHROUT
        sta xprintf_putc_ptr
        lda #>CHROUT
        sta xprintf_putc_ptr + 1
        ldy #0
        lda (cc64_frameptr), y
        tax
        jsr CHKOUT
        bcs fprintf_error
        jsr READST
        sta readst_by_file_no-file_no_offset, x
        bne fprintf_readst_error

        ldy #2
        jsr xprintf

        jsr CLRCHN
        lda xprintf_count
        ldx xprintf_count + 1
        rts

fprintf_error
        sta cc64_symbol_errno
fprintf_readst_error
        jsr CLRCHN
        lda #$ff
        tax
        rts

cc64_type_printf = int_func
cc64_symbol_printf
        ; stash away param count
        sty xprintf_param_count
        lda #<CHROUT
        sta xprintf_putc_ptr
        lda #>CHROUT
        sta xprintf_putc_ptr + 1

        ldy #0
        jsr xprintf

        lda xprintf_count
        ldx xprintf_count + 1
        rts

xprintf_done
        pla
        pla
        rts

xprintf_get_next_char
        lda (xprintf_fmt_ptr, x)
        beq xprintf_done
        inc xprintf_fmt_ptr
        bne +
        inc xprintf_fmt_ptr + 1
+       rts

xprintf
        lda (cc64_frameptr), y
        sta xprintf_fmt_ptr
        iny
        lda (cc64_frameptr), y
        sta xprintf_fmt_ptr + 1
        iny

        ldx #0
        stx xprintf_count
        stx xprintf_count + 1
xprintf_mainloop
        jsr xprintf_get_next_char
        cmp #'%'
        beq xprintf_format_char
xprintf_print_char
        jsr xprintf_putc
        jmp xprintf_mainloop

xprintf_format_char
        lda #6  ; default: 0 leading characters
        sta xprintf_leading_count
        lda #' '
        sta xprintf_leading_char
        lda #$80
        sta xprintf_param_sign
        jsr xprintf_get_next_char

        cmp #'%'
        beq xprintf_print_char


        cmp #'0'
        bne xprintf_check_width
        sta xprintf_leading_char
        lsr xprintf_param_sign
        jsr xprintf_get_next_char

xprintf_check_width
        cmp #'9'+1
        bcs xprintf_match_specifyer
        cmp #'1'
        bcc xprintf_print_wat
        ; formula for the comparison value for leading chars:
        ; -n+6 if n is the value in %nd, e.g. -3+6 for %3d
        sbc #'0'  ; carry is already set
        eor #$ff
        adc #6    ; carry is still set
        sta xprintf_leading_count
        jsr xprintf_get_next_char

xprintf_match_specifyer
        cmp #'s'
        beq xprintf_print_s
        cmp #'x'
        beq xprintf_print_x
        cmp #'c'
        beq xprintf_print_c
        cmp #'u'
        beq xprintf_print_u
        cmp #'d'
        beq xprintf_print_d
xprintf_print_wat
        lda #'?'
        bne xprintf_print_char

xprintf_print_c
        lda (cc64_frameptr), y
        iny
        iny
        jmp xprintf_print_char

xprintf_print_s
        jsr xprintf_get_next_param
-
        lda (xprintf_param_val, x)
        beq xprintf_mainloop
        inc xprintf_param_val
        bne +
        inc xprintf_param_val + 1
+
        jsr xprintf_putc
        jmp -

xprintf_print_x
        iny
        lda (cc64_frameptr), y
        dey
        cmp #$10
        bcs xprintf_print_x_4digits
        cmp #0
        bne xprintf_print_x_3digits
        lda (cc64_frameptr), y
        cmp #$10
        bcs xprintf_print_x_2digits
        bcc xprintf_print_x_1digit

xprintf_print_x_4digits
        pha
        jsr xprintf_print_x_hi_nibble
        pla
xprintf_print_x_3digits
        jsr xprintf_print_x_lo_nibble
        lda (cc64_frameptr), y
xprintf_print_x_2digits
        jsr xprintf_print_x_hi_nibble
        lda (cc64_frameptr), y
xprintf_print_x_1digit
        jsr xprintf_print_x_lo_nibble
        iny
        iny
        jmp xprintf_mainloop


xprintf_print_d
        jsr xprintf_get_next_param
        bit xprintf_param_val + 1
        bpl xprintf_print_d_positive
        clc
        lda xprintf_param_val
        eor #$ff
        adc #$01
        sta xprintf_param_val
        lda xprintf_param_val + 1
        eor #$ff
        adc #$00
        sta xprintf_param_val + 1
        inc xprintf_leading_count
        jmp xprintf_print_d_u

xprintf_print_u
        jsr xprintf_get_next_param
xprintf_print_d_positive
        stx xprintf_param_sign
xprintf_print_d_u
        lda #$10
        sta xprintf_d_count
        lda #0
        ldx #4
-       sta xprintf_d_out, x
        dex
        bpl -

xprintf_print_d_next
        asl xprintf_param_val
        rol xprintf_param_val + 1

        ldx #4
xprintf_rol_next
        lda xprintf_d_out, x
        and #$0f
        php       ; save carry
        clc
        cmp #$05
        bcc +
        adc #$02  ; really +3 since carry is set
+       plp       ; restore carry
        rol
        sta xprintf_d_out, x
        asl
        asl
        asl
        asl
        dex
        bpl xprintf_rol_next

        dec xprintf_d_count
        bne xprintf_print_d_next

        ldx #0
-       lda xprintf_d_out, x
        and #$0f
        bne +
        inx
        cpx #$04
        bcc -
+

        bit xprintf_param_sign
        bvc +
        lda #'-'
        jsr xprintf_putc
+
-       cpx xprintf_leading_count
        bmi +
        lda xprintf_leading_char
        jsr xprintf_putc
        inc xprintf_leading_count
        jmp -
+
        bit xprintf_param_sign
        bpl +
        lda #'-'
        jsr xprintf_putc
+

-       lda xprintf_d_out, x
        and #$0f
        ora #$30
        jsr xprintf_putc
        inx
        cpx #$05
        bcc -
        ldx #0
        jmp xprintf_mainloop

xprintf_get_next_param
        lda (cc64_frameptr), y
        sta xprintf_param_val
        iny
        lda (cc64_frameptr), y
        sta xprintf_param_val + 1
        iny
        rts

xprintf_print_x_hi_nibble
        lsr
        lsr
        lsr
        lsr
xprintf_print_x_lo_nibble
        and #$0f
        ora #$30
        cmp #$3a
        bcc +
        adc #$06  ; really +7 since carry is set
+       jmp xprintf_putc
