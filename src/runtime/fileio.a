
ACPTR  = $FFA5
CHKIN  = $FFC6
CHKOUT = $FFC9
CHROUT = $FFD2
CHRIN  = $FFCF
CINT   = $FF81
CIOUT  = $FFA8
CLOSE  = $FFC3
CLRCHN = $FFCC
GETIN  = $FFE4
IOINIT = $FF84
LISTEN = $FFB1
OPEN   = $FFC0
PLOT   = $FFF0
READST = $FFB7
RESTOR = $FF8A
SECOND = $FF93
STOP   = $FFE1
TALK   = $FFB4
TKSA   = $FF96
UDTIM  = $FFEA
UNLSN  = $FFAE
UNTLK  = $FFAB
MEMTOP = $FF99
SETNAM = $FFBD
SETLFS = $FFBA


cc64_type_cbm_k_readst = char_fastcall
cc64_symbol_cbm_k_readst
        jsr READST
        ldx #0
        rts

+cc64_static_char ~passed_param_count, 0

; char fnunit = 8;
+cc64_static_char ~cc64_symbol_fnunit, 8
cc64_type_fnunit = char_var

; __fastcall int remove(char* filename);
cc64_type_remove = int_fastcall
cc64_symbol_remove
        sta tmp_zp1
        stx tmp_zp1 + 1
        lda cc64_symbol_fnunit
        jsr LISTEN
        lda #$ff
        jsr SECOND
        ldx #0
remove_1
        lda s0colon,x
        beq remove_2
        jsr CIOUT
        inx
        bne remove_1
remove_2
        ldy #0
remove_3
        lda (tmp_zp1),y
        beq remove_4
        jsr CIOUT
        iny
        bne remove_3
remove_4
        jsr UNLSN
        lda #1
        ldx #0
        rts

s0colon !pet "s0:", 0

cc64_type__allocfh = char_fastcall
cc64_symbol__allocfh
        jsr allocate_file_no
        ldx #0
        rts

cc64_type__freefh = char_fastcall
cc64_symbol__freefh
        jsr release_file_no
        ldx #0
        rts


allocate_file_no
        jsr get_free_file_no
        tax
        beq allocate_nothing
        lda mask_by_file_no-file_no_offset,x
        eor #$ff
        and file_no_mask
        sta file_no_mask
        txa
allocate_nothing
        rts

get_free_file_no
        lda file_no_mask
        beq no_free_file
        tax
        and #$0f
        bne lookup_file_no
        txa
        lsr
        lsr
        lsr
        lsr
        jsr lookup_file_no
        clc
        adc #4
no_free_file
        rts

lookup_file_no
        tax
        lda file_no_by_mask,x
        rts

release_file_no
        tax
        lda mask_by_file_no-file_no_offset,x
        ora file_no_mask
        sta file_no_mask
        txa
        rts

+cc64_static_char ~file_no_mask, $ff

file_no_offset = 7
offs = file_no_offset

file_no_by_mask
        !byte      0, offs, offs+1, offs, offs+2, offs, offs+1, offs
        !byte offs+3, offs, offs+1, offs, offs+2, offs, offs+1, offs

mask_by_file_no
        !byte $01, $02, $04, $08, $10, $20, $40, $80

+cc64_static_buf ~readst_by_file_no, 0, 8
cc64_type__cc64_last_readst = int_fastcall
cc64_symbol__cc64_last_readst
        tax
        lda readst_by_file_no-file_no_offset,x
        ldx #0
        rts


; int fopen(char* filename, char* mode);
cc64_type_fopen = int_func
cc64_symbol_fopen
        sty passed_param_count
        cpy #0
        beq fopen_error

        ldy #0
        sty cc64_symbol_errno
        lda (cc64_frameptr),y
        sta tmp_zp1
        iny
        lda (cc64_frameptr),y
        sta tmp_zp1 + 1
        ora tmp_zp1
        beq fopen_done
        dey
        lda (tmp_zp1),y
        beq fopen_done

fopen_copy_name
        sta file_name,y  ; TODO: check for comma
        iny
        cpy #$10
        beq fopen_check_mode
        lda (tmp_zp1),y
        bne fopen_copy_name

fopen_check_mode
        tya
        tax

        ldy #1
        cpy passed_param_count
        beq fopen_filename_ok
        iny
        lda (cc64_frameptr),y
        sta tmp_zp2
        iny
        lda (cc64_frameptr),y
        sta tmp_zp2 + 1
        ora tmp_zp2
        beq fopen_filename_ok
        ldy #0
        lda (tmp_zp2),y
        beq fopen_filename_ok

fopen_copy_mode
        sta file_name,x
        inx
        iny
        lda (tmp_zp2),y
        bne fopen_copy_mode


fopen_filename_ok
        txa
        ldx #<file_name
        ldy #>file_name
        jsr SETNAM

        jsr allocate_file_no
        ldx cc64_symbol_fnunit
        tay
        pha
        jsr SETLFS
        jsr OPEN
        bcs fopen_open_error
        pla
        tax
        jsr READST
        sta readst_by_file_no-file_no_offset,x
        bne fopen_readst_error
        txa
fopen_done
        ldx #0
        rts

fopen_open_error
        sta cc64_symbol_errno
        pla
fopen_readst_error
        jsr release_file_no
fopen_error
        lda #0
        beq fopen_done

+cc64_static_buf ~file_name, 0, $15
; cc64_symbol_fopen_file_name = file_name
; cc64_type_fopen_file_name = char_ptr

+cc64_static_char ~cc64_symbol_errno, 0
cc64_type_errno = char_var


; __fastcall int fclose(int fh);
cc64_type_fclose = int_fastcall
cc64_symbol_fclose
        ldx #0
        stx cc64_symbol_errno
        jsr release_file_no
        jsr CLOSE
        bcs fclose_error
        jsr READST
        sta readst_by_file_no-file_no_offset,x
        and #$bf
        bne fclose_readst_error
        lda #0
fclose_done
        tax
        rts

fclose_error
        sta cc64_symbol_errno
fclose_readst_error
        lda #$ff
        bne fclose_done


; __fastcall int fgetc(int fh);
cc64_type_fgetc = int_fastcall
cc64_symbol_fgetc
        tax
        stx tmp_zp1
        lda readst_by_file_no-file_no_offset,x
        and #$40
        bne fgetc_eof_error
        jsr CHKIN
        bcs fgetc_error
        jsr CHRIN
        bcs fgetc_error
        tay
        jsr READST
        ldx tmp_zp1
        sta readst_by_file_no-file_no_offset,x
        and #$bf
        bne fgetc_readst_error
        jsr CLRCHN
        tya
        ldx #0
        rts

fgetc_error
        sta cc64_symbol_errno
fgetc_readst_error
        jsr CLRCHN
fgetc_eof_error
        lda #$ff
        tax
        rts


; int fputc(int c, int fh);
cc64_type_fputc = int_func
cc64_symbol_fputc
        cpy #2
        bne fgetc_error

        ldx #0
        stx cc64_symbol_errno
        ldy #2
        lda (cc64_frameptr),y
        tax
        jsr CHKOUT
        bcs fgetc_error
        jsr READST
        sta readst_by_file_no-file_no_offset,x
        bne fgetc_readst_error

        ldy #0
        lda (cc64_frameptr),y
        jsr CHROUT
        bcs fgetc_error
        jsr READST
        sta readst_by_file_no-file_no_offset,x
        bne fgetc_readst_error

        jsr CLRCHN
        lda (cc64_frameptr),y
        ldx #0
        rts


; char* fgets(char* str, int count, int fh);
cc64_type_fgets = char_ptr_func
cc64_symbol_fgets
        cpy #3
        bne fgets_param_error

        ldy #0
        sty cc64_symbol_errno
        lda (cc64_frameptr),y
        sta tmp_zp1
        iny
        lda (cc64_frameptr),y
        sta tmp_zp1 + 1
        iny
        sec
        lda #0
        sbc (cc64_frameptr),y
        sta tmp_zp2
        iny
        lda #0
        sbc (cc64_frameptr),y
        sta tmp_zp2 + 1
        iny
        lda (cc64_frameptr),y
        tax
        stx cc64_zp
        jsr CHKIN
        bcs fgets_error

        ldy #0
fgets_nextchar
        ldx cc64_zp
        lda readst_by_file_no-file_no_offset,x
        and #$40
        bne fgets_done

        jsr CHRIN
        bcs fgets_error
        sta (tmp_zp1),y
        iny
        bne +
        inc tmp_zp1 + 1
+       cmp #$0d
        beq fgets_done

        jsr READST
        ldx cc64_zp
        sta readst_by_file_no-file_no_offset,x
        and #$bf
        bne fgets_readst_error

        inc tmp_zp2
        bne +
        inc tmp_zp2 + 1
+       bne fgets_nextchar

fgets_done
        jsr fgets_finish
        ldy #1
        lda (cc64_frameptr),y
        tax
        dey
        lda (cc64_frameptr),y
        rts

fgets_readst_error
        ldx cc64_zp
        sta readst_by_file_no-file_no_offset,x
        bne +
fgets_error
        sta cc64_symbol_errno
+       jsr fgets_finish
fgets_param_error
        lda #0
        tax
        rts

fgets_finish
        jsr CLRCHN
        lda #0
        sta (tmp_zp1),y
        rts


; char* fputs(char* str, int fh);
cc64_type_fputs = int_func
cc64_symbol_fputs
        cpy #2
        bne fputs_param_error

        ldy #0
        sty cc64_symbol_errno
        lda (cc64_frameptr),y
        sta tmp_zp1
        iny
        lda (cc64_frameptr),y
        sta tmp_zp1 + 1
        iny
        lda (cc64_frameptr),y
        tax
        stx tmp_zp2
        jsr CHKOUT
        bcs fputs_error

        ldy #0
fputs_nextchar
        lda (tmp_zp1),y
        beq fputs_done
        jsr CHROUT
        bcs fputs_error
        jsr READST
        bne fputs_readst_error
        iny
        bne +
        inc tmp_zp1 + 1
+       bne fputs_nextchar

fputs_done
        jsr CLRCHN
        lda #0
        tax
        rts

fputs_readst_error
        ldx tmp_zp2
        sta readst_by_file_no-file_no_offset,x
        bne +
fputs_error
        sta cc64_symbol_errno
+       jsr CLRCHN
fputs_param_error
        lda #$ff
        tax
        rts


; __fastcall int putchar(int c);
cc64_type_putchar = int_fastcall
cc64_symbol_putchar
        cpx #0
        bne +
        jsr CHROUT
        bcs +
        rts

+       lda #$ff
        tax
        rts

; __fastcall int puts(char* str);
cc64_type_puts = int_fastcall
cc64_symbol_puts
        stx tmp_zp1 + 1
        sta tmp_zp1
        ora tmp_zp1 + 1
        beq puts_error
        ldy #0
puts_nextchar
        lda (tmp_zp1),y
        beq puts_done
        jsr CHROUT
        bcs puts_error
        iny
        bne +
        inc tmp_zp1 + 1
+       bne puts_nextchar

puts_error
        lda #$ff
        !byte $2c  ; bit absolute address

puts_done
        lda #0
        tax
        rts
