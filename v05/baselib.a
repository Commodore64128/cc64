
; cc64 runtime module
; to run in c64 at $0801-$a000

; philip zembrod, 10.05.1994
; last change :   08.05.2020

!addr   cc64_statics_start = $a000
!addr   cc64_statics_end   = $a000
!addr   cc64_sp            = $fd
!addr   cc64_zp            = $fb

!addr   tmp_zp1            = $22
!addr   tmp_zp2            = $24

!addr   strout  = $ab1e
!addr   ready   = $e37b

        *= $0801

cc64_lib_start
        !word baslink
        !word 2020
        !byte $9e
        !pet " 2081:"
        !byte $8f
        !pet " cc64 rt-lib v0.5", 0
baslink !word 0

        jmp init

cc64_lib_jumplist
main_adr      !word 0  ; the start addr of the main() function
code_last     !word 0
statics_first !word 0
statics_last  !word 0

        jmp (cc64_zp)
        jmp switch
        jmp mult
        jmp divmod
        jmp shl
        jmp shr

init    lda code_last
        sta cc64_sp
        lda code_last + 1
        sta cc64_sp + 1
        lda statics_last
        sta tmp_zp2
        ldx statics_last + 1
        stx tmp_zp2 + 1
        ldy #0
init1   cmp statics_first
        bne init2
        cpx statics_first + 1
init2   beq init5
        sec
        sbc #1
        bcs init3
        dex
init3   sta tmp_zp2
        stx tmp_zp2 + 1
        lda (cc64_sp),y
        sta (tmp_zp2),y
        inc cc64_sp
        bne init4
        inc cc64_sp + 1
init4   lda tmp_zp2
        jmp init1

init5   
;        lda code_last
;        sta cc64_sp
;        lda code_last + 1
;        sta cc64_sp + 1
        jmp (main_adr)

switch  tay
        pla
        clc
        adc #1
        sta cc64_zp
        pla
        adc #0
        sta cc64_zp + 1
        tya
        ldy #0
switch1 pha
        lda (cc64_zp),y
        sta tmp_zp1
        iny
        ora (cc64_zp),y
        beq switch5
        lda (cc64_zp),y
        sta tmp_zp1+1
        iny
        bne switch2
        inc cc64_zp + 1
switch2 pla
        cmp (cc64_zp),y
        php
        iny
        plp
        bne switch4
        pha
        txa
        cmp (cc64_zp),y
        bne switch3
        pla
        jmp (tmp_zp1)
switch3 pla
switch4 iny
        bne switch1
        inc cc64_zp + 1
        jmp switch1

switch5 sec
;        iny
        tya
        adc cc64_zp
        bcc switch6
        inc cc64_zp + 1
switch6 jmp (cc64_zp)



mult    stx tmp_zp1 + 1
        lsr tmp_zp1 + 1
        ror
        sta tmp_zp1     ; multiplikator

        lda #0
        sta tmp_zp2
        ldx #16
mu1     bcc mu2
        tay
        lda tmp_zp2
        clc
        adc cc64_zp
        sta tmp_zp2
        tya
        adc cc64_zp + 1
mu2     ror
        ror tmp_zp2
        ror tmp_zp1 + 1
        ror tmp_zp1
        dex
        bne mu1
;       tay
        lda tmp_zp1
        ldx tmp_zp1 + 1  ; lo-word produkt
;       tya
;       tax
;       lda tmp_zp2      ; hi-word produkt
        rts


negate  clc
        eor #$ff
        adc #1
        tay
        txa
        eor #$ff
        adc #0
        tax
        tya
        rts

divmod  stx tmp_zp2 + 1 ; sign of divident
        bit tmp_zp2 + 1
        bpl div1
        jsr negate
div1    tay         ; save divident-lo
        txa
        eor cc64_zp + 1  ; sign of divisor
        asl
        ror tmp_zp2     ; sign of result
        bit cc64_zp + 1  ; sign of divisor
        bpl div2
        clc         ; negate divisor
        lda cc64_zp      ; in cc64_zp/cc64_zp + 1
        eor #$ff
        adc #1
        sta cc64_zp
        lda cc64_zp + 1
        eor #$ff
        adc #0
        sta cc64_zp + 1
div2    tya      ; restore divident-lo
        ldy #0
        sty tmp_zp1
        sty tmp_zp1 + 1
div3    cpx cc64_zp + 1
        bne div4
        cmp cc64_zp
div4    bcc div5
        asl cc64_zp
        rol cc64_zp + 1
        iny
        bpl div3
        lda #<div_zero
        ldy #>div_zero
        jsr strout
        jmp ready

div5    dey
        bmi div8
        lsr cc64_zp + 1
        ror cc64_zp
        cpx cc64_zp + 1
        bne div6
        cmp cc64_zp
div6    php
        bcc div7
        sbc cc64_zp
        pha
        txa
        sbc cc64_zp + 1
        tax
        pla
div7    plp
        rol tmp_zp1
        rol tmp_zp1 + 1
        bcc div5
        brk  ; remove this some day :)

div8    bit tmp_zp2 + 1
        bpl div9
        jsr negate
div9    sta cc64_zp
        stx cc64_zp + 1
        lda tmp_zp1
        ldx tmp_zp1 + 1
        bit tmp_zp2
        bpl div10
        jsr negate
div10   rts


shl     iny
shl1    dey
        beq div10
        asl
        pha
        txa
        rol
        tax
        pla
        jmp shl1


shr     iny
shr1    dey
        beq div10
        pha
        txa
        asl
        txa
        ror
        tax
        pla
        ror
        jmp shr1

div_zero !pet "division by zero", $0d, 0

cc64_lib_end
